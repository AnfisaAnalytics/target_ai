import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, time, timedelta
import numpy as np
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# layout="wide" - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
# initial_sidebar_state="expanded" - –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
st.set_page_config(
    page_title="–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
# @st.cache_data - –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_data
def load_data():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º JSON —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with open('data.json', 'r', encoding='utf-8') as file:
            json_data = json.load(file)
        df = pd.DataFrame(json_data['data'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç—ã
        date_columns = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞", "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"]
        for col in date_columns:
            df[col] = pd.to_datetime(df[col])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.day_name()  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        df['–ß–∞—Å'] = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.hour  # –ß–∞—Å –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–∞
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        df['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'] = (df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'] - df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60
        
        return df
    except FileNotFoundError:
        st.error("–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
def filter_data_by_timeframe(df, timeframe):
    now = pd.Timestamp.now()
    if timeframe == "–°–µ–≥–æ–¥–Ω—è":
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.date == now.date()]
    elif timeframe == "–ù–µ–¥–µ–ª—è":
        week_ago = now - timedelta(days=7)
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= week_ago]
    elif timeframe == "–ú–µ—Å—è—Ü":
        month_ago = now - timedelta(days=30)
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= month_ago]
    elif timeframe == "–ì–æ–¥":
        year_ago = now - timedelta(days=365)
        return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= year_ago]
    else:  # "–í—Å–µ –¥–∞–Ω–Ω—ã–µ"
        return df

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ KPI
def calculate_kpis(df):
    if df.empty:
        return {
            "repeat_percentage": 0.0,
            "avg_wait_time": 0.0,
            "lost_calls": 0,
            "cost_per_call": 500,
            "after_hours_percentage": 0.0
        }
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    total_requests = len(df)
    repeated_requests = df['–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞'].value_counts()
    repeated_requests = repeated_requests[repeated_requests > 1].sum()
    repeat_percentage = (repeated_requests / total_requests) * 100
    
    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    avg_wait_time = df['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'].mean()
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è > 30 –º–∏–Ω—É—Ç)
    lost_calls = len(df[df['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'] > 30])
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è
    cost_per_call = 500
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    def is_working_hours(hour):
        return 9 <= hour <= 18
    
    after_hours = len(df[~df['–ß–∞—Å'].apply(is_working_hours)])
    after_hours_percentage = (after_hours / total_requests) * 100
    
    return {
        "repeat_percentage": round(repeat_percentage, 1),
        "avg_wait_time": round(avg_wait_time, 1),
        "lost_calls": lost_calls,
        "cost_per_call": cost_per_call,
        "after_hours_percentage": round(after_hours_percentage, 1)
    }

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    time_periods = ["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ"]
    selected_period = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", time_periods, horizontal=True)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    filtered_df = filter_data_by_timeframe(df, selected_period)
    
    if filtered_df.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {selected_period}")
        return
        
    kpis = calculate_kpis(filtered_df)
    
    # KPI —Å–µ–∫—Ü–∏—è
    st.header("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã", f"{kpis['repeat_percentage']}%")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", f"{kpis['avg_wait_time']} –º–∏–Ω")
    with col3:
        st.metric("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", kpis['lost_calls'])
    with col4:
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è", f"{kpis['cost_per_call']} ‚ÇΩ")
    with col5:
        st.metric("–ó–∞–ø—Ä–æ—Å—ã –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤", f"{kpis['after_hours_percentage']}%")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # CSS –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –≤—ã—Å–æ—Ç–æ–π
    st.markdown("""
        <style>
            .stColumn {
                padding: 0.5rem;
                height: 100%;
            }
            .element-container {
                margin: 0.5rem 0;
            }
            /* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
            .chart-container {
                height: 400px;  /* –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
            }
        </style>
    """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    left_col, right_col = st.columns([1, 1])
    
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
    with left_col:
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        st.subheader("–û–±—ä–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π")
        heatmap_data = pd.crosstab(filtered_df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'], filtered_df['–ß–∞—Å'])
        fig_heatmap = px.imshow(heatmap_data,
                               labels=dict(x="–ß–∞—Å", y="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π"),
                               aspect="auto",
                               color_continuous_scale="Blues")
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        fig_heatmap.update_layout(height=400)  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã
        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI")
        ai_potential = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': ['% —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', '–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–º–µ–Ω—É', 
                       '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏', '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [f"{kpis['repeat_percentage']}%", 
                        f"{kpis['avg_wait_time']} –º–∏–Ω", 
                        "5",
                        f"{100 - kpis['after_hours_percentage']}%",
                        f"{kpis['cost_per_call']} ‚ÇΩ"]
        })
        st.table(ai_potential)
    
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    with right_col:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_height = st.slider("–í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø–∏–∫—Å–µ–ª–µ–π)", 200, 600, 300)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
        fig_pie = px.pie(filtered_df, names='–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞')
        fig_pie.update_layout(height=chart_height)
        st.plotly_chart(fig_pie, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        st.subheader("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        fig_line = px.line(filtered_df.groupby('–ß–∞—Å')['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'].mean().reset_index(),
                          x='–ß–∞—Å', y='–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è')
        fig_line.update_layout(height=chart_height)
        st.plotly_chart(fig_line, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        st.subheader("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        satisfaction_data = filtered_df['–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏'].value_counts().sort_index()
        fig_bar = px.bar(satisfaction_data)
        fig_bar.update_layout(height=chart_height)
        st.plotly_chart(fig_bar, use_container_width=True)

if __name__ == "__main__":
    main()
