import streamlit as st
import pandas as pd
import plotly.express as px
import json
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
color_palette = ['rgba(239, 132, 50, 0.7)', 'rgba(46, 96, 107, 0.7)', 
                'rgba(4, 21, 35, 0.7)', 'rgba(111, 46, 24, 0.7)', 
                'rgba(122, 85, 86, 0.7)', 'rgba(146, 151, 172, 0.7)']

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    page_icon="üìä",
    layout="wide"
)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
    <style>
        /* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
        .stApp {
            background-color: #f0f2f6 !important;
        }
        
        .main {
            padding: 1rem 2rem !important;
        }
        .stMetric, .element-container, .stDataFrame{
        box-shadow:0 2px 4px rgba(0,0,0,0) !important;
        }
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ */
        .stMetric, .element-container, .stDataFrame {
            background-color: white !important;
            padding: 1.5rem !important;
            border-radius: 8px !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
            margin-bottom: 1rem !important;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        div.stButton > button {
            background-color: white !important;
            border: 1px solid #e0e0e0 !important;
            padding: 0.5rem 1rem !important;
            border-radius: 4px !important;
            font-weight: 500 !important;
            color: #333 !important;
            width: 100% !important;
        }
        
        div.stButton > button:hover {
            background-color: #f8f9fa !important;
            border-color: #ccc !important;
        }
        
        div.stButton > button:focus {
            background-color: #ef8432 !important;
            color: white !important;
            border-color: #ef8432 !important;
        }
        
        /* –ì—Ä–∞—Ñ–∏–∫–∏ */
        .js-plotly-plot {
            background-color: white !important;
            border-radius: 8px !important;
            padding: 1rem !important;
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        h1, h2, h3 {
            color: #2e606b !important;
            font-weight: 600 !important;
        }

        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ */
        .chart-container {
            background-color: white !important;
            padding: 1.5rem !important;
            border-radius: 8px !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
            margin-bottom: 1rem !important;
        }
    </style>
""", unsafe_allow_html=True)

def load_data(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        json_data = json.load(f)
    
    # Convert the data list to DataFrame
    df = pd.DataFrame(json_data['data'])
    
    # Convert datetime columns
    datetime_cols = ['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞', '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞']
    for col in datetime_cols:
        df[col] = pd.to_datetime(df[col])
    
    # Calculate response and resolution times in minutes
    df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)'] = (df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'] - df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60
    df['–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)'] = (df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞'] - df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60
    
    return df

def filter_data_by_timerange(df, timerange):
    now = datetime.now()
    if timerange == "–°–µ–≥–æ–¥–Ω—è":
        start_date = now - timedelta(days=1)
    elif timerange == "–ù–µ–¥–µ–ª—è":
        start_date = now - timedelta(days=7)
    elif timerange == "–ú–µ—Å—è—Ü":
        start_date = now - timedelta(days=30)
    elif timerange == "–ì–æ–¥":
        start_date = now - timedelta(days=365)
    else:  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ
        return df
    
    return df[df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'] >= start_date]

def main():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = load_data('data.json')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        header_col1, header_col2 = st.columns([0.4, 0.6])
        
        with header_col1:
            st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            st.markdown("### –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        with header_col2:
            st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥")
            filter_cols = st.columns(5)
            
            # Initialize session state
            if 'active_timerange' not in st.session_state:
                st.session_state.active_timerange = "–í—Å–µ –¥–∞–Ω–Ω—ã–µ"
            
            # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
            time_ranges = ["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ"]
            for i, time_range in enumerate(time_ranges):
                with filter_cols[i]:
                    if st.button(
                        time_range,
                        type="primary" if st.session_state.active_timerange == time_range else "secondary"
                    ):
                        st.session_state.active_timerange = time_range
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_df = filter_data_by_timerange(df, st.session_state.active_timerange)
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        metrics = {
            'avg_response_time': filtered_df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)'].mean(),
            'avg_resolution_time': filtered_df['–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)'].mean(),
            'resolution_rate': (filtered_df['–†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞'].mean() * 100),
            'avg_satisfaction': filtered_df['–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏'].mean()
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        metric_cols = st.columns(4)
        
        with metric_cols[0]:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{metrics['avg_response_time']:.2f} –º–∏–Ω")
        with metric_cols[1]:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è", f"{metrics['avg_resolution_time']:.2f} –º–∏–Ω")
        with metric_cols[2]:
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à–µ–Ω–∏—è", f"{metrics['resolution_rate']:.1f}%")
        with metric_cols[3]:
            st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{metrics['avg_satisfaction']:.1f}/5")
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        col1, col2 = st.columns([0.7, 0.3])
        
        with col1:
            st.markdown("### –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
            fig_response = px.bar(
                filtered_df,
                x='–£—Å–ª—É–≥–∞',
                y='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)',
                color='–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞',
                title="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —É—Å–ª—É–≥–∞–º –∏ —Ç–µ–º–∞–º",
                color_discrete_sequence=color_palette
            )
            st.plotly_chart(fig_response, use_container_width=True)
        
        with col2:
            st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ª—É–≥")
            fig_service = px.pie(
                filtered_df,
                names='–£—Å–ª—É–≥–∞',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–∞–º",
                color_discrete_sequence=color_palette
            )
            st.plotly_chart(fig_service, use_container_width=True)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        col3, col4 = st.columns([0.4, 0.6])
        
        with col3:
            st.markdown("### –û—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            fig_satisfaction = px.histogram(
                filtered_df,
                x='–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫",
                nbins=5,
                color_discrete_sequence=[color_palette[0]]
            )
            st.plotly_chart(fig_satisfaction, use_container_width=True)
        
        with col4:
            st.markdown("### –î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è")
            fig_resolution = px.line(
                filtered_df,
                x='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞',
                y='–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)',
                title="–¢—Ä–µ–Ω–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è",
                color_discrete_sequence=[color_palette[1]]
            )
            st.plotly_chart(fig_resolution, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.dataframe(
            filtered_df[[
                '–£—Å–ª—É–≥–∞', '–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞', '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)',
                '–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)', '–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏', '–†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞'
            ]],
            use_container_width=True
        )
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

if __name__ == "__main__":
    main()
