import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, time
import numpy as np
import json

# Set page configuration
st.set_page_config(
    page_title="–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Function to load and prepare data
@st.cache_data
def load_data():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
        with open('data.json', 'r', encoding='utf-8') as file:
            json_data = json.load(file)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(json_data['data'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç –≤ datetime
        date_columns = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞", "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"]
        for col in date_columns:
            df[col] = pd.to_datetime(df[col])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.day_name()
        df['–ß–∞—Å'] = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'].dt.hour
        df['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'] = (df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'] - df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60
        
        return df
    except FileNotFoundError:
        st.error("–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ KPI
def calculate_kpis(df):
    if df.empty:
        return {
            "repeat_percentage": 0.0,
            "avg_wait_time": 0.0,
            "lost_calls": 0,
            "cost_per_call": 500,
            "after_hours_percentage": 0.0
        }
    
    # 1. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    total_requests = len(df)
    repeated_requests = df['–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞'].value_counts()
    repeated_requests = repeated_requests[repeated_requests > 1].sum()
    repeat_percentage = (repeated_requests / total_requests) * 100
    
    # 2. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    avg_wait_time = df['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'].mean()
    
    # 3. –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (—Å—á–∏—Ç–∞–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è > 30 –º–∏–Ω—É—Ç)
    lost_calls = len(df[df['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'] > 30])
    
    # 4. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è (—É—Å–ª–æ–≤–Ω–æ –±–µ—Ä–µ–º 500 —Ä—É–±–ª–µ–π)
    cost_per_call = 500
    
    # 5. –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    def is_working_hours(hour):
        return 9 <= hour <= 18
    
    after_hours = len(df[~df['–ß–∞—Å'].apply(is_working_hours)])
    after_hours_percentage = (after_hours / total_requests) * 100
    
    return {
        "repeat_percentage": round(repeat_percentage, 1),
        "avg_wait_time": round(avg_wait_time, 1),
        "lost_calls": lost_calls,
        "cost_per_call": cost_per_call,
        "after_hours_percentage": round(after_hours_percentage, 1)
    }

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
        
    kpis = calculate_kpis(df)
    
    # KPI —Å–µ–∫—Ü–∏—è
    st.header("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã", f"{kpis['repeat_percentage']}%")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", f"{kpis['avg_wait_time']} –º–∏–Ω")
    with col3:
        st.metric("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", kpis['lost_calls'])
    with col4:
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è", f"{kpis['cost_per_call']} ‚ÇΩ")
    with col5:
        st.metric("–ó–∞–ø—Ä–æ—Å—ã –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤", f"{kpis['after_hours_percentage']}%")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞–º–∏
    st.markdown("""
        <style>
            .stColumn {
                padding: 0.5rem;
            }
            .element-container {
                margin: 0.5rem 0;
            }
        </style>
    """, unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π (—Ç—Ä–∏ —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏)
    row1_col1, row1_col2, row1_col3 = st.columns([1, 1, 1])
    
    with row1_col1:
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
        st.subheader("–û–±—ä–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π")
        heatmap_data = pd.crosstab(df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'], df['–ß–∞—Å'])
        fig_heatmap = px.imshow(heatmap_data,
                               labels=dict(x="–ß–∞—Å", y="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π"),
                               aspect="auto",
                               color_continuous_scale="Blues")
        st.plotly_chart(fig_heatmap, use_container_width=True)
    
    with row1_col2:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
        fig_pie = px.pie(df, names='–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞', 
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with row1_col3:
        # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        st.subheader("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        fig_line = px.line(df.groupby('–ß–∞—Å')['–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'].mean().reset_index(),
                          x='–ß–∞—Å', y='–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                          title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        st.plotly_chart(fig_line, use_container_width=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π (30% / 70%)
    row2_col1, row2_col2 = st.columns([0.3, 0.7])
    
    with row2_col1:
        # –ì—Ä–∞—Ñ–∏–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        st.subheader("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        satisfaction_data = df['–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏'].value_counts().sort_index()
        fig_bar = px.bar(satisfaction_data,
                        title="–û—Ü–µ–Ω–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        st.plotly_chart(fig_bar, use_container_width=True)
    
    with row2_col2:
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI")
        ai_potential = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': ['% —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', '–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–º–µ–Ω—É', '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏', '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [f"{kpis['repeat_percentage']}%", 
                        f"{kpis['avg_wait_time']} –º–∏–Ω", 
                        "5", # –£—Å–ª–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        f"{100 - kpis['after_hours_percentage']}%",
                        f"{kpis['cost_per_call']} ‚ÇΩ"]
        })
        st.table(ai_potential)

if __name__ == "__main__":
    main()
