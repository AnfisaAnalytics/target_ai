import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import numpy as np
from fpdf import FPDF
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    page_icon="üìä",
    layout="wide"
)

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
COLOR_PALETTE = {
    'primary': '#FF6B6B',     # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π
    'secondary': '#4ECDC4',   # –ë–∏—Ä—é–∑–æ–≤—ã–π
    'accent1': '#45B7D1',     # –ì–æ–ª—É–±–æ–π
    'accent2': '#96CEB4',     # –ú—è—Ç–Ω—ã–π
    'accent3': '#FFEEAD',     # –ü–∞—Å—Ç–µ–ª—å–Ω—ã–π –∂–µ–ª—Ç—ã–π
}

def load_data():
    # –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ JSON
    data = {
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞": ["2024-11-30T17:01:27.859983"],
        "–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞": ["–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º"],
        "–£—Å–ª—É–≥–∞": ["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
        "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞": ["2024-11-30T17:02:52.015785"],
        "–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏": [5],
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞": ["2024-11-30T17:36:58.786956"],
        "–†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞": [True]
    }
    df = pd.DataFrame(data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç –≤ datetime
    date_columns = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞", "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"]
    for col in date_columns:
        df[col] = pd.to_datetime(df[col])
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–µ—à–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    df['–í—Ä–µ–º—è –¥–æ –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)'] = ((df['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'] - df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60)
    df['–í—Ä–µ–º—è –¥–æ —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)'] = ((df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞'] - df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞']).dt.total_seconds() / 60)
    
    return df

def create_metrics(df):
    avg_response_time = df['–í—Ä–µ–º—è –¥–æ –æ—Ç–≤–µ—Ç–∞ (–º–∏–Ω)'].mean()
    avg_resolution_time = df['–í—Ä–µ–º—è –¥–æ —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)'].mean()
    satisfaction_rate = df['–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏'].mean()
    resolution_rate = (df['–†–µ—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞'].sum() / len(df)) * 100
    
    return avg_response_time, avg_resolution_time, satisfaction_rate, resolution_rate

def create_plots(df):
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π
    topic_fig = px.bar(
        df['–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞'].value_counts().reset_index(),
        x='index',
        y='–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π',
        color_discrete_sequence=[COLOR_PALETTE['primary']],
        labels={'index': '–¢–µ–º–∞', '–¢–µ–º–∞ –∑–≤–æ–Ω–∫–∞': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π'}
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É—Å–ª—É–≥–∞–º
    service_fig = px.bar(
        df['–£—Å–ª—É–≥–∞'].value_counts().reset_index(),
        x='index',
        y='–£—Å–ª—É–≥–∞',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–∞–º',
        color_discrete_sequence=[COLOR_PALETTE['secondary']],
        labels={'index': '–£—Å–ª—É–≥–∞', '–£—Å–ª—É–≥–∞': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π'}
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    satisfaction_fig = px.scatter(
        df,
        x='–í—Ä–µ–º—è –¥–æ —Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω)',
        y='–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏',
        title='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è',
        color_discrete_sequence=[COLOR_PALETTE['accent1']]
    )
    
    return topic_fig, service_fig, satisfaction_fig

def create_pdf_report(df, metrics):
    pdf = FPDF()
    pdf.add_page()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, '–û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 0, 1, 'C')
    pdf.ln(10)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, '–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:', 0, 1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics[0]:.2f} –º–∏–Ω', 0, 1)
    pdf.cell(0, 10, f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {metrics[1]:.2f} –º–∏–Ω', 0, 1)
    pdf.cell(0, 10, f'–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {metrics[2]:.2f}', 0, 1)
    pdf.cell(0, 10, f'–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {metrics[3]:.1f}%', 0, 1)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF –≤ –±—É—Ñ–µ—Ä
    pdf_buffer = io.BytesIO()
    pdf.output(pdf_buffer)
    pdf_buffer.seek(0)
    
    return pdf_buffer

def main():
    st.title('üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    metrics = create_metrics(df)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{metrics[0]:.2f} –º–∏–Ω")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è", f"{metrics[1]:.2f} –º–∏–Ω")
    with col3:
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{metrics[2]:.2f}")
    with col4:
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à–µ–Ω–∏—è", f"{metrics[3]:.1f}%")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    topic_fig, service_fig, satisfaction_fig = create_plots(df)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.plotly_chart(topic_fig, use_container_width=True)
    st.plotly_chart(service_fig, use_container_width=True)
    st.plotly_chart(satisfaction_fig, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF-–æ—Ç—á–µ—Ç–∞
    if st.button('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á–µ—Ç'):
        pdf_buffer = create_pdf_report(df, metrics)
        b64_pdf = base64.b64encode(pdf_buffer.read()).decode()
        href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="support_report.pdf">–°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á–µ—Ç</a>'
        st.markdown(href, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
